@page "/"
@using UpSchool.Domain.Dtos
@using UpSchool.Domain.Utilities
@inject IJSRuntime JsRuntime
@inject IToastService ToastService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card mt-3">
                <div class="card-header">
                    <div class="card-title text-center">
                        <h2 class="text-info">
                            Password Generator
                        </h2>
                        <p>Create secure passwords with our Password Generator</p>
                    </div>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-9">
                            <p>@password</p>
                        </div>
                        <div class="col-md-1">
                            <span @onclick="@(()=>SavedPasswordAsync())" class="oi oi-folder clickable" aria-hidden="true"></span>
                        </div>
                        <div class="col-md-1">
                            <span @onclick="@(() => CopyToClipboardAsync())" class="oi oi-document clickable" aria-hidden="true"></span>
                        </div>
                        <div class="col-md-1">
                            <span @onclick=@GeneratePassword class="oi oi-loop-circular clickable" aria-hidden="true"></span>
                        </div>
                    </div>
                </div>

                <div class="card-footer">
                    <hr class=@CssColourClass style="height: 2vh !important;" />
                </div>
            </div>
        </div>

    </div>
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card mt-3">
                <div class="card-body">
                    <div class="mt-2 text-center">
                        <label>
                            Password Length <span class="@($"badge {CssColourClass}")">@generatePasswordDto.Length</span>
                        </label>

                        <input class="form-range" type="range"
                               value="@generatePasswordDto.Length" @oninput=@OnInputChange min="6" max="40" step="1" />
                    </div>
                </div>
                <div class="card-footer d-flex justify-content-between">
                    <div class="form-check">
                        <input type="checkbox" class="form-check-input" @bind="@generatePasswordDto.IncludeNumbers"
                               @bind:event="oninput"
                               @onchange="@((args) => CheckboxOnChange(args, "numbers"))" id="numbers" />
                        <label class="form-check-label" for="numbers">Numbers</label>
                    </div>

                    <div class="form-check">
                        <input type="checkbox" class="form-check-input" @bind="@generatePasswordDto.IncludeLowercaseCharacters"
                               @bind:event="oninput"
                               @onchange="@((args) => CheckboxOnChange(args, "lowercaseChars"))" id="lowercaseChars" />
                        <label class="form-check-label" for="lowercaseChars">Lowercase Chars</label>
                    </div>

                    <div class="form-check">
                        <input type="checkbox" class="form-check-input" @bind="@generatePasswordDto.IncludeUppercaseCharacters"
                               @bind:event="oninput"
                               @onchange="@((args) => CheckboxOnChange(args, "uppercaseChars"))" id="uppercaseChars" />
                        <label class="form-check-label" for="uppercaseChars">Uppercase Chars</label>
                    </div>

                    <div class="form-check">
                        <input type="checkbox" class="form-check-input" @bind="@generatePasswordDto.IncludeSpecialCharacters"
                               @bind:event="oninput"
                               @onchange="@((args) => CheckboxOnChange(args, "specialChars"))" id="specialChars" />
                        <label class="form-check-label" for="specialChars">Special Chars</label>
                    </div>
                </div>
            </div>
        </div>

    </div>
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card mt-3">
                <div class="card-header text-center" >
                    <div class="card title">
                        <h3 class="text-primary"> Saved Password</h3>
                    </div>
                </div>
                <div class="card-body">
                    @if (savedPasswords.Any())
                    {
                        <ul class="list-group text-center">
                            @foreach (var savedPassword in savedPasswords)
                            {
                                <li @onclick="@(() => CopyToClipboardAsync())" class="@( $"list-group-item text-white clickable {GetCssColourClass(savedPassword.Length)}")">@savedPassword</li>
                            }
                        </ul>
                    }
                    else
                    {
                        <div class="text-center">
                            <h5>There isn't any passwords.</h5>
                        </div>
                    }
                </div>
                <div class="card-footer d-flex justify-content-between">
                    <button class="btn btn-outline-danger" @onclick=@ClearSavedPasswords>Clear</button>
                </div>
            </div>
        </div>

    </div>
</div>


@code
{
    public PasswordGenerator passwordGenerator = new PasswordGenerator();

    public GeneratePasswordDto generatePasswordDto = new GeneratePasswordDto();

    public string password = string.Empty;

    public string CssColourClass = "bg-danger";

    private List<string> savedPasswords;

    protected override async Task OnInitializedAsync()
    {
        savedPasswords = new List<string>();

        GeneratePassword();

        var localStoragePasswords = await LocalStorage.GetItemAsync<List<string>> ("savedPasswords");

        if(localStoragePasswords is not null) savedPasswords = localStoragePasswords;

        await base.OnInitializedAsync();
    } 

    private ValueTask SavedPasswordAsync()
    {
        ToastService.ShowSuccess("The selected password was successfully saved.");

        if (savedPasswords.Any(x => x == password)) return ValueTask.CompletedTask;

        ToastService.ShowSuccess("The selected password was successfully saved.");

        savedPasswords.Add(password);

        return LocalStorage.SetItemAsync("savedPasswords", savedPasswords);
    }

    private void GeneratePassword()
    {
        password = passwordGenerator.Generate(generatePasswordDto);

        CssColourClass = GetCssColourClass(password.Length);

        //savedPasswords.Add(password);
    }

    private ValueTask CopyToClipboardAsync()
    {
        ToastService.ShowSuccess("The selected password was copied to the clipboard.");

        return JsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", password);
    }

    private void CheckboxOnChange(ChangeEventArgs args, string checkBoxName)
    {
        switch (checkBoxName)
        {
            case "numbers":
                generatePasswordDto.IncludeNumbers = Convert.ToBoolean(args.Value);
                break;

            case "lowercaseChars":
                generatePasswordDto.IncludeLowercaseCharacters = Convert.ToBoolean(args.Value);
                break;

            case "uppercaseChars":
                generatePasswordDto.IncludeUppercaseCharacters = Convert.ToBoolean(args.Value);
                break;

            case "specialChars":
                generatePasswordDto.IncludeSpecialCharacters = Convert.ToBoolean(args.Value);
                break;

            default:
                throw new Exception("Beklenmedik bir Checkbox adı geldi.");
                break;

        }

        password = passwordGenerator.Generate(generatePasswordDto);
    }

    private void OnInputChange(ChangeEventArgs args)
    {
        generatePasswordDto.Length = Convert.ToInt32(args.Value);

        password = passwordGenerator.Generate(generatePasswordDto);

        CssColourClass = GetCssColourClass(generatePasswordDto.Length);

    }

    private string GetCssColourClass(int length)
    { 
        //Break kullanamama nedenimiz değeri return ettiği için kendinden sonrakileri kontrol etmiyor bu nedenle break kullanammıza gerek yok.
        switch (length)
        {
            case var value when (value >= 6 && value <= 12):
                return "bg-danger";

            case var value when (value > 12 && value <= 19):
                return "bg-warning";

            case var value when (value > 19 && value <= 40):
                return "bg-success";

            default:
                throw new Exception("Beklenmedik bir password uzunluğu geldi.");
                break;
        }
    }

    private void ClearSavedPasswords()
    {
        savedPasswords.Clear();
    }
}

<style>
    body {
        background: #393E46
    }
</style>